一 NPM
    1.node package manager node包管理工具
        在安装node时会附带安装npm工具,便于安装第三方包在自己项目中使用,可以下载安装,卸载,更新第三方的包
    2.npm管理的包统一存放在node_modules,文件夹名固定,会自动生成名字不用改
    3.使用
        1)初始化当前项目目录为包结构 npm init -y
            会在当前目录下生成package.json文件,用于记录当前项目所安装的所有第三方包信息
        2)安装第三方包
            npm install 包名 (npm install express)
            会在当前目录下生成node_modules目录,存放所有安装好的包和依赖包,
                同时生成一个pacage-lock.json,用于记录所有已安装依赖包的信息
            项目中引入第三方包时,只需要写包名,会自动到当前目录开始查找node_modules文件夹
                并在内部查找包名,按照包内部package.json中指定的入口文件引入对应模块
            解决问题:1.网络问题:换网,下载cnpm(在网上找链接)2.权限问题:在命令前加上 sudo
二express介绍
    1.基于nodeJS的前端框架,可以快速搭建web服务器,使用时需要先下载,具体方式如上    
    2.创建web服务器
    3.使用中间件
        1)中间件:客户端与服务器端设置的重重关卡,用于拦截请求和响应
        2)express提供的中间件类型
            -应用级别中间件(结合实际业务需求使用)
            -路由级别中间件(路由:请求地址/接口地址,例:/login),也称路由中间件,可以实现模块化管理路由
            -内置中间件(静态文件托管或参数解析)
            -第三方中间件(根据需求使用)
            -处理错误中间件
            提示:所有中间件都需要通过 服务器.use(中间件)方式挂载到服务器上使用
三express使用
    1.导入express,创建web服务器
    2.接口编写
        通过express创建服务器之后,可以使用为服务器提供的方法来监听前端发来的请求
            服务器.get("接口地址",(请求对象,响应对象)=>{})
            服务器.post("接口地址",(请求对象,响应对象)=>{})
            服务器.put("接口地址",(请求对象,响应对象)=>{})
            服务器.delete("接口地址",(请求对象,响应对象)=>{})
    3.服务器响应
        res.sendFile("文件绝对路径",{
            headers:{
                "Content-Type":"text.html;charset=utf8"
            }
        });
        res.send(data);